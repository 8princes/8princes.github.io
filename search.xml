<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[从python2迁移到python3的一些事儿]]></title>
    <url>%2F2018%2F09%2F08%2F%E4%BB%8Epython2%E8%BF%81%E7%A7%BB%E5%88%B0python3%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BA%8B%2F</url>
    <content type="text"><![CDATA[最近，需要将一个python2的项目重构。介于到2020年开始python官方将正式停止对python2的支持，索性决定先将项目迁移到python3再进行重构。期间，遇到的一些问题在此做下记录。 2to3Python 3自带了一个叫做2to3的实用脚本，这个脚本会将你的Python 2程序源文件作为输入，然后自动将其转换到Python 3的形式。 命令： 1$ 2to3 example.py 它会将python2的print变成函数;unicode编码转换成str等。官方文档 MySQL-python的替代者MySQL-python 又叫 MySQLdb，是 Python 连接 MySQL 最流行的一个驱动，很多框架都也是基于此库进行开发，但是它只支持Python2.x。对于python3而言有两种选择。 PyMySQLPyMySQL 是纯 Python 实现的驱动，速度上比不上 MySQLdb，最大的特点可能就是它的安装方式没那么繁琐，同时也兼容 MySQL-python。但是使用的时候需要加入额外的代码。 1pymysql.install_as_MySQLdb() mysqlclient在一位牛X同事的推荐下，我最后选择了mysqlclient。这是MySQL-python的fork版本，支持python3。安装方式和MySQL-python一样。完全不需要其他任何修改，非常方便。参考网站 open函数python2中open文件句柄是str(原始二进制)的，而python3中是str(unicode字符)，因此以下代码在python3中会报错： 1234with open('test','w') as f: f.write(os.urandom(10))TypeError: write() argument must be str, not bytes 可以改成 12with open('test','wb') as f: f.write(os.urandom(10))]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python多线程使用场景比较]]></title>
    <url>%2F2018%2F09%2F06%2Fpython%E5%A4%9A%E7%BA%BF%E7%A8%8B%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF%E6%AF%94%E8%BE%83%2F</url>
    <content type="text"><![CDATA[python中的多线程 多线程即在一个进程中启动多个线程执行任务。一般来说使用多线程可以达到并行的目的。 但是，由于python中使用了全局解释锁GIL（global interpreter lock）的概念，在用cpu执行计算任务的时候，GIL锁不会被释放，python多线程其实还是使用的单核在进行cpu计算。一个cpu时间片只会分给一个线程，因此，cpu密集型的情况下，多线程并不会加快计算速度。 而python在io阻塞的情况下，会释放GIL锁，其他线程会在当前线程等待返回值（阻塞）的情况下继续执行发送请求（output），第三个线程又会在第二个线程等待返回值（阻塞）的情况下发送请求（output），即在同一时间片段，会有一个线程在等待数据，也会有一个线程在发数据。这就减少了io传输的时间。 CPU密集型任务定义一个CPU计算密集型任务12345678def task_cpu(task_id): print("CPU task[%s] start" % task_id) for i in range(100): count = 0 for i in range(10000): count += pow(3*2, 3*2) print("CPU task[%s] end" % task_id) return task_id 顺序执行10次123456def sync_compute(): for i in range(10): task_cpu(i)s=time.time()sync_compute()print(time.time()-s) 总耗时：4.718312740325928 多线程执行12345678910111213def threads_compute(): threads = [] for i in range(10): threads.append(threading.Thread(target=task_cpu,args=(i,))) for t in threads: t.start() for t in threads: t.join()# %timeit async_request()import times=time.time()threads_compute()print(time.time()-s) 总耗时：4.946189880371094 多线程执行CPU密集型任务甚至比顺序执行还费时了一点点。这是由于线程切换时间导致的。可见，python多线程不适合执行CPU密集型任务。 IO密集型任务定义一个IO计算密集型任务12345import requests,timedef task_io(t_id): print('io task[&#123;&#125;] start'.format(t_id)) requests.get('http://0.0.0.0:8000/example/test') print('io task[&#123;&#125;] end'.format(t_id)) 这里用django框架简单定义了一个http接口，接到请求后等待2秒。代码如下： 1234class TestView(APIView): def get(self, request): time.sleep(2) return json_resp(code=200) 顺序执行10次12345678910import requestsdef sync_io(): for i in range(10): task_io(i) # %timeit sync_request()import times=time.time()sync_io()print(time.time()-s) 总耗时：20.233391761779785 多线程执行123456789101112131415import threadingdef threads_request(): threads = [] for i in range(10): threads.append(threading.Thread(target=task_io,args=(i,))) for t in threads: t.start() for t in threads: t.join()# %timeit async_request()import times=time.time()threads_request()print(time.time()-s) 总耗时：2.036729097366333 相比较下，多线程执行这个IO密集型任务速度提高了近10倍。 结果证明，python多线程更适合IO密集型任务。]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[QT-环境搭建-Failed to retrieve MSVC Environment]]></title>
    <url>%2F2018%2F08%2F17%2FQT-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA-Failed-to-retrieve-MSVC-Environment%2F</url>
    <content type="text"><![CDATA[出错环境：Win10 + QT 5.11.1 + MSVC2016_32bit (from: MSVC 2017 Community) QT installer 提示有新的版本，emmmmm…点完确认更新之后的 0.1s 后我就后悔了，Windows 这么高深莫测的环境变量和注册表可能不是我驾驭得了的…然后等更新完炸了，好好的 QT + MSVC 编译环境全炸了！ Failed to retrieve MSVC Environment！！！ 掏出万能的 Stack Overflow https://stackoverflow.com/questions/46951357/qt-creator-on-win-10-failed-to-retrieve-msvc-environment 注意到这段回答，和这位小哥是缘分： The comments above helped to find the likely source. I couldn’t “fix” it, but get around it by opening the Qt developer’s cmd prompt, load the appropriate vsvarsall.bat file and the run qtcreator from the same cmd prompt. QtCreator will subsequently be unresponsive for over a minute after it’s started, but then it’ll be fine. 解决方案12345678910111213141516# 启动 cmdWIN + R 输入 cmd# 跳转至 MSVC 环境 XX 目录cd C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build\# 等加载完 msvc 的环境，会弹出一个新的 cmdstart vcvarsall.bat amd64_x86# 在新弹出来的 cmd 中切换到 QtCreator bin 目录cd C:\Qt\Tools\QtCreator\bin# 手动启动 QtCreatorstart qtcreator.exe# done 补充说明在查询解决方案的过程中有看到官方论坛里评论可能是 cmd 执行过长引起的：https://bugreports.qt.io/browse/QTCREATORBUG-19099 具体原因还不是很清楚，这个方案只是能启动一个正常工作的 QtCreator]]></content>
      <tags>
        <tag>qt</tag>
        <tag>env</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python-基础语法-多余的逗号]]></title>
    <url>%2F2018%2F08%2F03%2Fpython-%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95-%E5%A4%9A%E4%BD%99%E7%9A%84%E9%80%97%E5%8F%B7%2F</url>
    <content type="text"><![CDATA[Hello everybody做为一个程序员真的很难，你要面对很多的选择，比如说：缩进打四个空格还是一个tab？键盘买hhkb还是real force…？双屏是横切？纵切？上下左右？要用什么编程语言？世界上最好的PHP？用啥编辑器？pycharm? sublime? atom…?…当着别人的面做出选择了之后，你还得为了面子苦苦坚持当时的选择。我们现在的python项目组在用三款编辑器，那个一直用原生sublime的小傻货Dan就不去提他了，因为以后我们还会在各种文章里经常提到他。其实一开始进行开发的时候，我的老师建议我用vim做开发，经历了一周的痛苦使用后我选择了放弃，这NM什么玩意儿？然后一个学长建议我使用一下atom，安装使用的那天我装了一个叫Activate Power Mode的插件，wc怎么这么酷炫！这么震撼！这么屌！敲击代码效果爆炸了，然后至今为止我都坚持用着这款编辑器。说到这里，像是安利，但是我没有，接下来，我想说一下，多余的逗号：atom安装后其实是一个非常简洁的编辑器，你需要安装各种插件以适用自己的使用习惯，这一点我蛮喜欢的，个人定制化嘛，然后定制化的我没有装语法检查插件。那一次我写好了代码，然后运行检查通过之后上传了，在直属领导进行code review的时候发现我在代码的某一行里多了一个逗号，就是那么基础的错误。不深究我怎么造成的错误，问题是我的编辑器没有报错，没有明显的提示，因为我没有装语法检测的插件。然后大家围观了上来，并狂喷了我的atom，pycharm党开始各种演示表示自己的编辑器不会出现这样的问题，并顺口喷了一遍那个还在用sublime的Dan（笑）。说到这里我想表达的是 balck or white, we’re one and the same. 这个算是整片文章的一个主题吧，没有绝对的好与坏，我们要尊重每个人的选择和他们的坚持。虽然我喷了好次Dan，实际上我们两个是十分要好的朋友我才会这样调侃他；我也没有用过sublime，其实是不知道它的优点和缺点，所以也没有权利这样说（但php一定是世界上最好的语言）；如果使用过我觉得肯定也有sublime非常好的使用场景。在选择编辑器之前，希望大家可以相互问问参考一下，都试一试，像vim的使用经验在我后面进行运维的一些工作时起了很大的帮助作用；也不一定要就用一款编辑器，像我们组这种情况，因为都是全栈，所以会用很多款编辑器比如：python用pycharm，go用vscode，vuejs用vscode，java用vscode，c用vscode，c++用vscode…而我全用atom配合各种插件，就是舍不得Activate Power Mode，一刻都离不开…8princes小组的成员经常没有恶意的嘲讽互怼，氛围特别好，所以才会决定开这么一个模块互相嘲讽一下，也觉得有趣；这些bug都是我们自己实际碰到的，我们也都是蛮不要脸的，即使是很低级的错误，也敢分享，所以希望大家可以看的开心，然后有所收获：）]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2006%2F01%2F02%2Fhello-world%2F</url>
    <content type="text"></content>
  </entry>
</search>
